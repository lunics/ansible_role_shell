- block:
  - name: ({{ item.name }}) zsh | file > create zsh config dir
    file:
      path:  "{{ path_zsh }}"
      state: directory
      owner: "{{ item.name }}"
      group: "{{ item.group | default(item.name) }}"

  ## KO
  # - name: ({{ item.name }}) zsh | template > export zsh scripts
  #   template:
  #     src:  "{{ item }}"
  #     dest: "{{ path_zsh + '/' + (item | basename) }}"
  #     mode: "0600"
  #   with_fileglob:
  #     - ../templates/zsh/*

  - name: ({{ item.name }}) zsh | template > generate zshrc
    template:
      src:   zshrc
      dest:  "{{ path_zsh }}/zshrc"
      owner: "{{ item.name }}"
      group: "{{ item.group | default(item.name) }}"
      mode:  "0600"

  - name: ({{ item.name }}) zsh | stat > check if zplug repo present
    stat:
      path: "{{ path_zsh }}/zplug"
    register: _zplug

  - name: ({{ item.name }}) zsh | git > clone zplug on {{ path_zsh }}/zplug/
    git:
      repo:  https://github.com/zplug/zplug
      dest:  "{{ path_zsh }}/zplug"
      depth: 1
    when: not _zplug.stat.exists

  - name: ({{ item.name }}) zsh | file > setup owner and group for zplug dir
    file:
      path:    "{{ path_zsh }}/zplug"
      state:   directory
      recurse: true
      owner:   "{{ item.name }}"
      group:   "{{ item.group | default(item.name) }}"
      mode:    "0755"           # keep always double quotes

  - name: ({{ item.name }}) zsh | copy > config files
    copy:
      src:   "{{ role_path }}/files/zsh/"
      dest:  "{{ ('/root' if item.name == 'root' else ('/home/' + item.name)) + '/' + path_zsh }}"
      owner: "{{ item.name }}"
      group: "{{ item.group | default(item.name) }}"

  when:
  # - import_tasks: oh-my-zsh.yml

  when: item.shell == "zsh"
  tags: zsh
